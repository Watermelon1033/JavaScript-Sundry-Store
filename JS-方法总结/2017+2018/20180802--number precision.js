/**
 * @file: 解决浮动运算问题，避免小数点后 "产生多位数" 或 "计算精度损失"。
 *
 * 问题示例: 2.3 + 2.4 = 4.699999999999999
 *          1.0 - 0.9 = 0.09999999999999998
 */


/*
 * trip /strɪp/     n.带、长条   vt. 剥夺、脱掉
 * 把错误的数据转正
 * strip(0.09999999999999998) = 0.1
 */
function strip(num, precision = 12 ) {

}






/* ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ */

const a = 100.60,
    b = 10.06,
    c = 0.1,
    d = 0.2;
let aa = a - b;
let f = c + d;

console.log(a - b);     // 90.53999999999999
console.log(c + d);     // 0.30000000000000004

/** number.toPrecision(x): 在对象的值超出指定位数时将其转换为指数计算法。所有浏览器都支持。
 * 参数 x: 必需。 规定必需被转换为指数计数法的最小位数。该参数时 1 ~ 21 之间 (且包括 1 和 21)
 * 的值。有效实现允许有选择地支持更大或更小的 num。如果省略了该参数，则调用方法 toString(), 而
 * 不是把数字转换成十进制的值。*/
console.log(aa.toPrecision(4));     // 90.54
console.log(f.toPrecision(2));     // 0.30